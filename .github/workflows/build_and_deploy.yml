name: Build and deploy Go application

on:
  push:
    branches:
      - main
      - develop
    tags:
      - v*

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.env }}
    steps:
      - id: get_env
        run: |
          if grep -q "refs/tags/v" <<< ${{github.ref}}; then
            echo "::set-output name=env::PROD"
          else
            echo "::set-output name=env::DEV"
          fi
      - id: print_env
        name: Print environment
        run: echo  "Environment :- ${{ steps.get_env.outputs.env }}"

  build_and_deploy:
    name: Build and deploy the go-api repository
    runs-on: ubuntu-latest
    needs: setup_environment
    environment: ${{needs.setup_environment.outputs.env_name}}
    steps:
      - uses: actions/checkout@v2

      - name: Use golang ${{matrix.go-version}}
        uses: actions/setup-go@v2
        with:
          go-version: '^1.14'
      - run: go version
      
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE go_db;' -uroot -proot
          mysql -e "show databases;" -uroot -proot
      
      - name: Initialize the environment variables
        run: |
          echo "ENVIRONMENT=local
          ServerPort=8080
          DBHost=localhost
          DBPort=3306
          DBName=go_db
          DBUsername=root
          DBPassword=root     
          " > .env

      - name: Initialize firebase service account key file
        run: |
          echo ${{secrets.FIREBASE_SERVICE_ACCOUNT_KEY}} | base64 --decode > serviceAccountKey.json
     
      - name: Build the repository
        run: go build main.go
      
      - name: Start the service
        run: |
          ./main &

      - name: Validate if the service is working or not via health check api
        run: |
          sleep 5
          curl http://localhost:8080/health-check

      - name: Initialize the environment variables again
        run: |
          rm -rf .env
          echo "ENVIRONMENT=${{secrets.ENVIRONMENT}}
          ServerPort=${{secrets.ServerPort}}
          DBHost=${{secrets.DBHost}}
          DBPort=${{secrets.DBPort}}
          DBName=${{secrets.DBName}}
          DBUsername=${{secrets.DBUsername}}
          DBPassword=${{secrets.DBPassword}}
          " > .env
    
      - name: Setup Cloud SDK
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
      
      - name: Deploy to App Engine
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        run: gcloud app deploy app.yaml --quiet --project ${{secrets.GCP_PROJECT_ID}}

      # - name: Slack Notification on SUCCESS
      #   if: success()
      #   uses: tokorom/action-slack-incoming-webhook@main
      #   env:
      #     INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     text: A build and *deploy job for go-api has succeeded :tada:.
      #     attachments: |
      #       [
      #         {
      #           "color": "good",
      #           "author_name": "${{ github.actor }}",
      #           "author_icon": "${{ github.event.sender.avatar_url }}",
      #           "fields": [
      #             {
      #               "title": "Commit Message",
      #               "value": "${{ github.event.head_commit.message }}"
      #             },
      #             {
      #               "title": "GitHub Actions URL",
      #               "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
      #             },
      #             {
      #               "title": "Compare URL",
      #               "value": "${{ github.event.compare }}"
      #             }
      #           ]
      #         }
      #       ]
      # - name: Slack Notification on FAILURE
      #   if: failure()
      #   uses: tokorom/action-slack-incoming-webhook@main
      #   env:
      #     INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     text: A build and *deploy job for go-api has failed :crying_cat_face:.
      #     attachments: |
      #       [
      #         {
      #           "color": "danger",
      #           "author_name": "${{ github.actor }}",
      #           "author_icon": "${{ github.event.sender.avatar_url }}",
      #           "fields": [
      #             {
      #               "title": "Commit Message",
      #               "value": "${{ github.event.head_commit.message }}"
      #             },
      #             {
      #               "title": "GitHub Actions URL",
      #               "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
      #             },
      #             {
      #               "title": "Compare URL",
      #               "value": "${{ github.event.compare }}"
      #             }
      #           ]
      #         }
      #       ]